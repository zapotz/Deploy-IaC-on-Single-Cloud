name: Deploy to AWS

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve

      - name: Get EC2 IP
        id: get_ip
        run: |
          cd terraform
          EC2_IP=$(terraform output -raw public_ip | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
          echo "::set-output name=ec2_ip::$EC2_IP"
          echo "Retrieved EC2 IP: $EC2_IP"
        shell: bash

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/aws_terraform_key
          chmod 600 ~/.ssh/aws_terraform_key
          ssh-keygen -y -f ~/.ssh/aws_terraform_key > ~/.ssh/aws_terraform_key.pub
        shell: bash

      - name: Wait for EC2 instance
        run: |
          echo "Waiting for EC2 instance to be ready..."
          timeout 300 bash -c 'until nc -z ${{ steps.get_ip.outputs.ec2_ip }} 22; do sleep 5; done'
        shell: bash

      - name: Deploy with Ansible
        run: |
          echo "[webservers]" > inventory.ini
          echo "web ansible_host=${{ steps.get_ip.outputs.ec2_ip }} ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/aws_terraform_key" >> inventory.ini
          echo "Inventory file contents:"
          cat inventory.ini
          echo "Testing SSH connection:"
          ssh -i ~/.ssh/aws_terraform_key -o StrictHostKeyChecking=no ec2-user@${{ steps.get_ip.outputs.ec2_ip }} echo "SSH connection successful"
          echo "Running Ansible playbook:"
          ansible-playbook -i inventory.ini ansible/playbook.yml -vvv
        env:
          ANSIBLE_HOST_KEY_CHECKING: False

      - name: Clean up
        if: always()
        run: |
          cd terraform
          terraform destroy -auto-approve