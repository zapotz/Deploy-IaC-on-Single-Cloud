name: Deploy to AWS

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve
        continue-on-error: true
          
      - name: Debug Terraform State
        run: |
            cd terraform
            terraform show
        shell: bash

      - name: Debug Terraform Outputs
        run: |
          cd terraform
          terraform output
          terraform output -json
        shell: bash

      

      - name: Get EC2 IP
        run: |
          cd terraform
          echo "Debug: Current directory"
          pwd
          echo "Debug: Terraform state"
          terraform show
          echo "Debug: Terraform outputs"
          terraform output
          echo "Debug: Attempting to get public_ip"
          RAW_OUTPUT=$(terraform output -raw public_ip || echo "FAILED")
          echo "Debug: Raw output: $RAW_OUTPUT"
          if [[ $RAW_OUTPUT == "FAILED" ]]; then
            echo "Error: Failed to retrieve EC2 IP"
            exit 1
          fi
          EC2_IP=$(echo $RAW_OUTPUT | sed 's/::debug::.*$//')
          if [ -z "$EC2_IP" ]; then
            echo "Error: Empty EC2 IP after processing"
            exit 1
          fi
          echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV
          echo "Retrieved EC2 IP: $EC2_IP"
        shell: bash
  
      - name: Deploy with Ansible
        run: |
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/aws_terraform_key
          chmod 600 ~/.ssh/aws_terraform_key
          echo "[webservers]" > ansible/inventory.ini
          echo "web ansible_host=${{ env.EC2_IP }} ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/aws_terraform_key" >> ansible/inventory.ini
          ansible-playbook -i ansible/inventory.ini ansible/playbook.yml
        env:
          ANSIBLE_HOST_KEY_CHECKING: False

      - name: Clean up
        if: always()
        run: |
          cd terraform
          terraform destroy -auto-approve
